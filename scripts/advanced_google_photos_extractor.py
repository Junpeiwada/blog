#!/usr/bin/env python3
"""
È´òÂ∫¶„Å™Google PhotosÁîªÂÉèURLÊäΩÂá∫ - Ë§áÊï∞ÊâãÊ≥ï„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ
"""

import time
import re
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

def setup_advanced_chrome_driver(headless=False):
    """
    È´òÂ∫¶„Å™Chrome WebDriver„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÔºà„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁõ£Ë¶ñÂØæÂøúÔºâ
    """
    chrome_options = Options()
    
    if headless:
        chrome_options.add_argument("--headless")
    
    # „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁõ£Ë¶ñ„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂêë‰∏äË®≠ÂÆö
    chrome_options.add_argument("--enable-logging")
    chrome_options.add_argument("--log-level=0")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
    
    # DevTools ProtocolÊúâÂäπÂåñ
    chrome_options.add_experimental_option("useAutomationExtension", False)
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    # „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁõ£Ë¶ñÈñãÂßã
    driver.execute_cdp_cmd('Network.enable', {})
    
    return driver

def extract_from_network_logs(driver):
    """
    Chrome DevTools Protocol„Åß„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞„Åã„Çâ„Éï„É´„Çµ„Ç§„Ç∫URLÊäΩÂá∫
    """
    try:
        # „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞„ÇíÂèñÂæó
        logs = driver.get_log('performance')
        
        fullsize_urls = []
        
        for log in logs:
            message = json.loads(log['message'])
            
            if message['message']['method'] == 'Network.responseReceived':
                url = message['message']['params']['response']['url']
                
                # Google PhotosÁîªÂÉèURL„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                if 'googleusercontent.com' in url and '=w' in url:
                    # „Çµ„Ç§„Ç∫„ÇíÁ¢∫Ë™ç
                    try:
                        width_part = url.split('=w')[1].split('-')[0]
                        width = int(width_part)
                        
                        # 3000px‰ª•‰∏ä„Çí„Éï„É´„Çµ„Ç§„Ç∫„Å®„Åó„Å¶Êé°Áî®
                        if width >= 3000:
                            fullsize_urls.append(url)
                            print(f"üåê „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞„Åã„ÇâÁô∫Ë¶ã: w{width}px")
                            
                    except (ValueError, IndexError):
                        pass
        
        return fullsize_urls
        
    except Exception as e:
        print(f"„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞„Ç®„É©„Éº: {e}")
        return []

def manual_like_interaction(driver):
    """
    ÊâãÂãïÊìç‰Ωú„Å´„Çà„ÇäËøë„ÅÑÁîªÂÉè„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥
    """
    fullsize_urls = []
    
    try:
        print("üñ±Ô∏è  ÊâãÂãïÊìç‰ΩúÊ®°ÂÄ£„ÇíÈñãÂßã...")
        
        # 1. „Éö„Éº„Ç∏ÂÖ®‰Ωì„Çí„Çπ„ÇØ„É≠„Éº„É´„Åó„Å¶ÂÖ®ÁîªÂÉè„ÇíË™≠„ÅøËæº„Åø
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(2)
        
        # 2. „Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™ÁîªÂÉè„Çª„É¨„ÇØ„Çø„ÅßÊ§úÁ¥¢
        image_selectors = [
            "div[data-photo-index]",  # ÁîªÂÉè„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
            "div[jsname][jsaction*='click']",  # Google PhotosÁâπÊúâ„ÅÆÁîªÂÉèË¶ÅÁ¥†
            "div[role='img']",  # „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„É≠„Éº„É´
            "c-wiz div[style*='background-image']",  # ËÉåÊôØÁîªÂÉè„Å®„Åó„Å¶Ë°®Á§∫„Åï„Çå„ÇãÂÜôÁúü
        ]
        
        all_clickable_elements = []
        
        for selector in image_selectors:
            elements = driver.find_elements(By.CSS_SELECTOR, selector)
            print(f"   „Çª„É¨„ÇØ„Çø '{selector[:25]}...': {len(elements)}ÂÄã")
            all_clickable_elements.extend(elements)
        
        # ÈáçË§áÈô§ÂéªÔºà‰ΩçÁΩÆ„ÅßÂà§ÂÆöÔºâ
        unique_elements = []
        seen_positions = set()
        
        for element in all_clickable_elements:
            try:
                location = element.location
                position_key = f"{location['x']},{location['y']}"
                
                if position_key not in seen_positions:
                    unique_elements.append(element)
                    seen_positions.add(position_key)
            except:
                continue
        
        print(f"   „É¶„Éã„Éº„ÇØÁîªÂÉèË¶ÅÁ¥†: {len(unique_elements)}ÂÄã")
        
        # 3. ÂêÑÁîªÂÉè„ÇíÈ†ÜÁï™„Å´„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éï„É´„Çµ„Ç§„Ç∫URLÂèñÂæó
        for i, element in enumerate(unique_elements[:8]):  # ÊúÄÂ§ß8Êûö
            try:
                print(f"     üéØ ÁîªÂÉè{i+1}„ÇíË©≥Á¥∞Ë°®Á§∫...")
                
                # Ë¶ÅÁ¥†„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„Åß„Çπ„ÇØ„É≠„Éº„É´
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)
                time.sleep(1)
                
                # „ÇØ„É™„ÉÉ„ÇØÂÆüË°å
                ActionChains(driver).move_to_element(element).click().perform()
                
                # „Éï„É´„Çµ„Ç§„Ç∫„Éì„É•„Éº„ÅÆÂÆåÂÖ®Ë™≠„ÅøËæº„ÅøÂæÖÊ©ü
                time.sleep(4)
                
                # 4. „Éï„É´„Çµ„Ç§„Ç∫„Éì„É•„Éº„Åß„ÅÆÁîªÂÉèURLÂèñÂæó
                try:
                    # „Éï„É´„Çµ„Ç§„Ç∫ÁîªÂÉèË¶ÅÁ¥†„ÇíÊ§úÁ¥¢
                    fullsize_img_selectors = [
                        "img[src*='googleusercontent.com'][src*='=w4']",  # w4000Áï™Âè∞
                        "img[src*='googleusercontent.com'][src*='=w3']",  # w3000Áï™Âè∞
                        "img[src*='=w'][src*='-h'][src*='-s-no-gm']",  # „Éï„É´„Çµ„Ç§„Ç∫„Éë„Çø„Éº„É≥
                    ]
                    
                    found_fullsize = False
                    
                    for fs_selector in fullsize_img_selectors:
                        fullsize_imgs = driver.find_elements(By.CSS_SELECTOR, fs_selector)
                        
                        for img in fullsize_imgs:
                            src = img.get_attribute("src")
                            if src and 'w4' in src or 'w3' in src:  # 3000px‰ª•‰∏ä
                                if src not in fullsize_urls:
                                    fullsize_urls.append(src)
                                    # „Çµ„Ç§„Ç∫ÊäΩÂá∫
                                    try:
                                        width = src.split('=w')[1].split('-')[0]
                                        print(f"       ‚úÖ „Éï„É´„Çµ„Ç§„Ç∫ÂèñÂæó: w{width}px")
                                    except:
                                        print(f"       ‚úÖ „Éï„É´„Çµ„Ç§„Ç∫ÂèñÂæó")
                                    found_fullsize = True
                    
                    # 5. „Éö„Éº„Ç∏„ÇΩ„Éº„Çπ„Åã„Çâ„ÇÇÊ§úÁ¥¢Ôºà„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÔºâ
                    if not found_fullsize:
                        detail_source = driver.page_source
                        
                        # „Éï„É´„Çµ„Ç§„Ç∫„Éë„Çø„Éº„É≥Ôºà„Çà„ÇäÂé≥ÂØÜÔºâ
                        fullsize_patterns = [
                            r'https://lh[0-9]+\.googleusercontent\.com/pw/[A-Za-z0-9_-]+=w[4-9][0-9]{3}-h[0-9]{4}-s-no-gm\?authuser=[0-9]+',
                            r'https://lh[0-9]+\.googleusercontent\.com/pw/[A-Za-z0-9_-]+=w[3-9][0-9]{3}-h[0-9]{4}-s-no-gm\?authuser=[0-9]+',
                            r'src="(https://lh[0-9]+\.googleusercontent\.com/pw/[A-Za-z0-9_-]+=w[3-9][0-9]{3}[^"]*)"',
                        ]
                        
                        for pattern in fullsize_patterns:
                            matches = re.findall(pattern, detail_source)
                            for match in matches:
                                if isinstance(match, tuple):
                                    match = match[0]  # group„Åå„ÅÇ„ÇãÂ†¥Âêà
                                
                                if match not in fullsize_urls:
                                    try:
                                        width = match.split('=w')[1].split('-')[0]
                                        if int(width) >= 2000:  # 2000px‰ª•‰∏ä
                                            fullsize_urls.append(match)
                                            print(f"       ‚úÖ „ÇΩ„Éº„Çπ„Åã„ÇâÁô∫Ë¶ã: w{width}px")
                                            found_fullsize = True
                                    except:
                                        pass
                    
                    if not found_fullsize:
                        print(f"       ‚ùå ÁîªÂÉè{i+1}: „Éï„É´„Çµ„Ç§„Ç∫URLÊú™Áô∫Ë¶ã")
                
                except Exception as fs_error:
                    print(f"       ‚ùå „Éï„É´„Çµ„Ç§„Ç∫Ê§úÁ¥¢„Ç®„É©„Éº: {fs_error}")
                
                # 6. „Éï„É´„Çµ„Ç§„Ç∫„Éì„É•„Éº„ÇíÈñâ„Åò„ÇãÔºàË§áÊï∞ÊñπÊ≥ïË©¶Ë°åÔºâ
                try:
                    # ÊñπÊ≥ï1: ESC„Ç≠„Éº
                    ActionChains(driver).send_keys(Keys.ESCAPE).perform()
                    time.sleep(1)
                except:
                    try:
                        # ÊñπÊ≥ï2: Èñâ„Åò„Çã„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ
                        close_button = driver.find_element(By.CSS_SELECTOR, "[aria-label*='Èñâ„Åò„Çã'], [aria-label*='Close'], button[jsname]")
                        close_button.click()
                        time.sleep(1)
                    except:
                        try:
                            # ÊñπÊ≥ï3: „Éñ„É©„Ç¶„Ç∂„Éê„ÉÉ„ÇØ
                            driver.back()
                            time.sleep(2)
                        except:
                            pass
                
            except Exception as element_error:
                print(f"     ‚ùå Ë¶ÅÁ¥†{i+1}Âá¶ÁêÜ„Ç®„É©„Éº: {element_error}")
                continue
        
        return fullsize_urls
        
    except Exception as interaction_error:
        print(f"ÊâãÂãïÊìç‰ΩúÊ®°ÂÄ£„Ç®„É©„Éº: {interaction_error}")
        return []

def extract_fullsize_with_advanced_methods(shared_link):
    """
    Ë§áÊï∞„ÅÆÈ´òÂ∫¶„Å™ÊâãÊ≥ï„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶„Éï„É´„Çµ„Ç§„Ç∫URLÊäΩÂá∫
    """
    print(f"üöÄ È´òÂ∫¶„Å™Google Photos URLÊäΩÂá∫ÈñãÂßã")
    print(f"üîó ÂØæË±°: {shared_link}")
    
    driver = None
    try:
        # 1. „Éñ„É©„Ç¶„Ç∂Ëµ∑ÂãïÔºà„Éá„Éê„ÉÉ„Ç∞Áî®„Å´Èùû„Éò„ÉÉ„Éâ„É¨„ÇπÔºâ
        print("üåê ChromeËµ∑Âãï‰∏≠Ôºà„Éñ„É©„Ç¶„Ç∂Ë°®Á§∫ÊúâÂäπÔºâ...")
        driver = setup_advanced_chrome_driver(headless=False)
        
        # 2. „Éö„Éº„Ç∏„Ç¢„ÇØ„Çª„Çπ
        print("üì± Google Photos„Éö„Éº„Ç∏„Å´„Ç¢„ÇØ„Çª„Çπ...")
        driver.get(shared_link)
        
        # „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæÖÊ©ü
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        time.sleep(5)  # JavaScriptÂÆåÂÖ®ÂÆüË°åÂæÖÊ©ü
        
        print(f"üìç ÊúÄÁµÇURL: {driver.current_url}")
        
        # 3. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞„Åã„Çâ„Éï„É´„Çµ„Ç§„Ç∫URLÊäΩÂá∫
        print("üåê „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É≠„Ç∞ÂàÜÊûê‰∏≠...")
        network_urls = extract_from_network_logs(driver)
        
        # 4. ÊâãÂãïÊìç‰ΩúÊ®°ÂÄ£„Åß„Éï„É´„Çµ„Ç§„Ç∫URLÂèñÂæó
        print("üñ±Ô∏è  ÊâãÂãïÊìç‰ΩúÊ®°ÂÄ£ÂÆüË°å‰∏≠...")
        interaction_urls = manual_like_interaction(driver)
        
        # 5. ÁµêÊûúÁµ±Âêà
        all_fullsize_urls = list(set(network_urls + interaction_urls))
        
        # 6. ÊúÄÁµÇ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        final_urls = []
        
        for url in all_fullsize_urls:
            # URL „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            clean_url = url.split('&quot;')[0].split('"); ')[0].strip()
            
            # „Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉèÈô§Â§ñ
            if '/a/' in clean_url:
                continue
                
            # „Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
            if '=w' in clean_url:
                try:
                    width = int(clean_url.split('=w')[1].split('-')[0])
                    if width >= 2000:  # 2000px‰ª•‰∏ä„ÅÆ„Åø
                        final_urls.append(clean_url)
                        print(f"‚úÖ ÊúÄÁµÇÊé°Áî®: w{width}px")
                except:
                    final_urls.append(clean_url)
            else:
                final_urls.append(clean_url)
        
        return final_urls
        
    except Exception as e:
        print(f"‚ùå ÊäΩÂá∫„Ç®„É©„Éº: {e}")
        return []
    
    finally:
        if driver:
            print("üîö „Éñ„É©„Ç¶„Ç∂ÁµÇ‰∫Ü...")
            driver.quit()

def main():
    print("üéØ È´òÂ∫¶„Å™Google Photos „Éï„É´„Çµ„Ç§„Ç∫URLÊäΩÂá∫")
    print("=" * 60)
    print("ÊâãÊ≥ï: Selenium + DevTools Protocol + ÊâãÂãïÊìç‰ΩúÊ®°ÂÄ£")
    print("Ê≥®ÊÑè: „Éñ„É©„Ç¶„Ç∂„ÅåË°®Á§∫„Åï„Çå„Åæ„ÅôÔºà„Éá„Éê„ÉÉ„Ç∞„ÅÆ„Åü„ÇÅÔºâ")
    
    test_url = "https://photos.app.goo.gl/qctTRRMsqWvjHaPKA"
    
    # È´òÂ∫¶„Å™ÊäΩÂá∫ÂÆüË°å
    extracted_urls = extract_fullsize_with_advanced_methods(test_url)
    
    if extracted_urls:
        print(f"\n‚úÖ {len(extracted_urls)}ÂÄã„ÅÆ„Éï„É´„Çµ„Ç§„Ç∫URL„ÇíÊäΩÂá∫ÊàêÂäüÔºÅ")
        
        print(f"\nüìã „Éï„É´„Çµ„Ç§„Ç∫URL‰∏ÄË¶ß:")
        print("=" * 50)
        
        for i, url in enumerate(extracted_urls, 1):
            # „Çµ„Ç§„Ç∫ÊÉÖÂ†±Ë°®Á§∫
            size_info = ""
            if '=w' in url:
                try:
                    width = url.split('=w')[1].split('-')[0]
                    height = url.split('-h')[1].split('-')[0]
                    size_info = f" ({width}x{height}px)"
                except:
                    pass
            
            print(f"{i:2d}. {url}{size_info}")
        
        print(f"\nüìù Ë®ò‰∫ãÁî®Markdown:")
        print("=" * 30)
        
        for i, url in enumerate(extracted_urls, 1):
            print(f"![ÁîªÂÉè{i}]({url})")
        
    else:
        print(f"\n‚ùå „Éï„É´„Çµ„Ç§„Ç∫URL„ÅÆÊäΩÂá∫„Å´Â§±Êïó")
        print("ÊâãÂãï„Åß„ÅÆÂØæÂøú„Åæ„Åü„ÅØ„Éô„Éº„ÇπURL„ÅÆ‰ΩøÁî®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô")

if __name__ == "__main__":
    main()